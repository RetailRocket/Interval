@startuml

abstract IInterval {
    LowerBound: LowerBound<T>
    UpperBound: UpperBound<T>
---
Intersect(another:IInterval<T>):IInterval<T>
}

class EmptyInterval {
}

class Interval {
    LowerBound: LowerBound<T>
    UpperBound: UpperBound<T>
}

abstract LowerPointedBound {
    Point: TPoint 
}

abstract UpperPointedBound {
    Point: TPoint
}

abstract LowerBound {
    CompareToPoint(point: TPoint) : int
    Compare(another: LowerBound<TPoint>): int
}

class OpenLowerBound {
}

class ClosedLowerBound {
}

class InfinityLowerBound {
}

IInterval <|-- EmptyInterval
IInterval <|-- Interval


LowerBound <|-- OpenLowerBound
LowerPointedBound <|-- OpenLowerBound
LowerBound <|-- ClosedLowerBound
LowerPointedBound <|-- ClosedLowerBound
LowerBound <|-- InfinityLowerBound

Interval "1"..."1" LowerBound

abstract UpperBound {
    CompareToPoint(point: TPoint) : int
    Compare(another: UpperBound<TPoint>): int
}

class OpenUpperBound {
}

class ClosedUpperBound {
}

class InfinityUpperBound {
}

UpperBound <|-- OpenUpperBound
UpperPointedBound <|-- OpenUpperBound
UpperBound <|-- ClosedUpperBound
UpperPointedBound <|-- ClosedUpperBound
UpperBound <|-- InfinityUpperBound

Interval "1"..."1" UpperBound

@enduml